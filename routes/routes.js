// Generated by CoffeeScript 1.9.3
(function() {
  var async, control, index, orm, sendToGateway, setAlarm, socketHandler;

  socketHandler = require('../socket/socketHandler');

  async = require('async');

  orm = require('orm');

  exports.doRoutes = function(app) {
    app.get('/', index);
    app.post('/api/upnp/control/:gatewayId(\\d+)/:uuid/*', control);
    return app.post('/api/control/alarm', setAlarm);
  };

  setAlarm = function(req, res) {
    console.log('alarm');
    return sendToGateway(req, res, req.body);
  };

  sendToGateway = function(req, res, body) {
    return async.waterfall([
      function(callback) {
        return req.models.gateway.find(function(err, gateways) {
          console.log(gateways[0].id);
          console.log(gateways[0].name);
          return callback(err, gateways[0]);
        });
      }, function(gateway, callback) {
        var selector;
        selector = {
          gateway: gateway.id,
          uuid: 'KAU-Arduino'
        };
        return req.models.device.find(selector, function(err, devices) {
          if (devices.length === 0) {
            return log.info('device not found');
          } else {
            return callback(err, gateway, devices[0]);
          }
        });
      }, function(gateway, device, callback) {
        return socketHandler.requestSetAlarm(gateway.name, gateway.identifier, device.uuid, req.body, function(err, message) {
          return callback(err, message);
        });
      }
    ], function(err, message) {
      if (err) {
        log.warn(err);
        return res.send(500, err);
      } else {
        return res.json(message);
      }
    });
  };

  control = function(req, res) {
    var gatewayId, restPath, uuid;
    log.info('control');
    log.info(req.body);
    uuid = req.param('uuid');
    restPath = req.params[0];
    gatewayId = req.param('gatewayId');
    return async.waterfall([
      function(callback) {
        return req.models.gateway.get(gatewayId, function(err, gateway) {
          return callback(err, gateway);
        });
      }, function(gateway, callback) {
        console.log(gateway.name);
        return socketHandler.requestDeviceControl(gateway.name, gateway.identifier, uuid, restPath, req.body, function(err, message) {
          return callback(err, message);
        });
      }
    ], function(err, message) {
      if (err) {
        log.warn(err);
        return res.send(500, err);
      } else {
        return res.json(message);
      }
    });
  };

  index = function(req, res) {
    return res.render('index');
  };

}).call(this);

//# sourceMappingURL=routes.js.map
